<openerp>
	<data>
		<record model="stock.location" id="stock_location_bonus_usage">
			<field name="name">Bonus Usage</field>
			<field name="usage">inventory</field>
			<field name="location_id" ref="stock.stock_location_locations_virtual" />
		</record>

		<record model="stock.opname.rule" id="stock_opname_rule_default">
			<field name="name">Default Stock Opname Rule</field>
			<field name="max_item_count">1</field>
			<field name="is_used" eval="True" />
			<field name="expiration_time_length">0.5</field>
			<field name="max_total_qty">100</field>
			<field name="algorithm">
def generate_stock_opname_products(self, cr, uid):
	product_obj = self.pool.get('product.product')
	today = datetime.now()
	last_week = today - timedelta(days=7)
	last_month = today - timedelta(days=30)
	
	product_ids = product_obj.search(cr, uid, [
		'&amp;', ('type', '=', 'product'),
		'|', ('latest_inventory_adjustment_date', '=', None),
		('latest_inventory_adjustment_date', '&lt;', last_week.strftime(DEFAULT_SERVER_DATETIME_FORMAT)),
	])
	
	filtered_products = []
	products = product_obj.browse(cr, uid, product_ids)
	products = products.sorted(key=lambda p: p.last_sale)
	for product in products:
		if product.last_sale:
			last_sale = datetime.strptime(product.last_sale, DEFAULT_SERVER_DATETIME_FORMAT)
			if last_month &lt; last_sale and last_sale &lt; today:
				filtered_products.append(product)
	
	stock_opname_products = []
	for filtered_product in filtered_products:
		stock_opname_products.append({'product_id': filtered_product.id})
	return stock_opname_products
			</field>
		</record>

		<record model="stock.warehouse" id="stock_warehouse_22">
			<field name="name">Gudang Pahlawan 22</field>
			<field name="code">W22</field>
			<field name="partner_id" ref="base.main_partner"/>
		</record>

		<record model="stock.warehouse" id="stock_warehouse_49">
			<field name="name">>Gudang Pahlawan 49</field>
			<field name="code">W49</field>
			<field name="partner_id" ref="base.main_partner"/>
		</record>

	</data>
</openerp>
